import params "params"
import flow "flow" exposes Sensing, Actuation
import position "position" exposes Positioning
import standup "standup" exposes Standup
import balance "balance" exposes LqrSim
import ui "ui"


activity RunManual(pp: params.Position, manualLimit: params.Limit,
                   moveCmd: ui.MoveEvent, sensors: Sensing)
                  (motion: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    cobegin
        repeat
            await moveCmd.present
            x_setpoint = moveCmd.x_setpoint
        end
    with
        run Positioning(pp, manualLimit, x_setpoint, sensors)(motion, actuators)
    end
end

activity RunStandup(pp: params.Position, standupLimit: params.Limit, sensors: Sensing)
                   (motion: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    var limit: params.Limit = {v_max = standupLimit.v_max, a_max = standupLimit.a_max}
    cobegin
        run Standup()(x_setpoint, limit)
    with
        run Positioning(pp, standupLimit, x_setpoint, sensors)(motion, actuators)
    end
end

activity RunBalancing(moveCmd: ui.MoveEvent, sensors: Sensing)
                     (motionStatus: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    cobegin
        repeat
            await moveCmd.present
            x_setpoint = moveCmd.x_setpoint
        end
    with
        run LqrSim(x_setpoint, sensors)(actuators)
    end
end



struct UIEvent
    var move: ui.MoveEvent
    var autorun: ui.AutorunEvent
end

@[EntryPoint]
activity Control(pc: params.Control, 
                 machineEnabled: bool, cmd: UIEvent, sensors: flow.Sensing)
                (motion: ui.MotionStatus, actuators: flow.Actuation)
    repeat
        if not machineEnabled then
            await machineEnabled
        end
        cobegin weak
            repeat
                var x_setpoint: float64 = sensors.x_actual
                when cmd.autorun.present and cmd.autorun.on abort
                    run RunManual(pc.position, pc.manualLimit, cmd.move, sensors)(motion, x_setpoint, actuators)
                end
                when cmd.autorun.present and not cmd.autorun.on abort
                    run RunStandup(pc.position, pc.standupLimit, sensors)(motion, x_setpoint, actuators)
                    run RunBalancing(cmd.move, sensors)(motion, x_setpoint, actuators)
                end
            end
        with
            await not machineEnabled 
        end
    end
end
