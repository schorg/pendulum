import params "params"
import flow "flow" exposes Sensing, Actuation
import position "position" exposes Positioning
import standup "standup" exposes Standup
import balance "balance" exposes LqrSim
import observe "observe"
import ui "ui"

module exposes Control

activity Moving (tune: params.Position, manualLimit: params.Limit,
                 moveManual: ui.MoveEvent, sensors: Sensing)
                (move: ui.MoveStatus, x_setpoint: float64, actuators: Actuation)
    
    var atPosition: bool
    cobegin
        repeat
            await moveManual.present
            x_setpoint = moveManual.x_setpoint
        end
    with
        run observe.Moving(atPosition)(move)
    with
        run Positioning(tune, manualLimit, x_setpoint, sensors)(atPosition, actuators)
    end
end

activity SwingingUp (tune: params.Position, 
                     standupLimit: params.Limit, 
                     moves: [11]params.Move, 
                     sensors: Sensing)
                    (autorun: ui.AutorunStatus, x_setpoint: float64, actuators: Actuation)
    var varyingLimit: params.Limit = {v_max = standupLimit.v_max, a_max = standupLimit.a_max}
    var atPosition: bool
    cobegin
       run Standup(moves, prev atPosition, sensors)(autorun, x_setpoint, varyingLimit)
    with weak
       run Positioning(tune, varyingLimit, x_setpoint, sensors)(atPosition, actuators)
    end
end

activity Balancing (tune: params.Balance, moveManual: ui.MoveEvent, sensors: Sensing)
                   (autorun: ui.AutorunStatus, x_setpoint: float64, actuators: Actuation)
    cobegin
        repeat
            await moveManual.present
            x_setpoint = moveManual.x_setpoint
        end
    with
        run LqrSim(tune, x_setpoint, sensors)(autorun, actuators)
    end
end


activity Control (tune: params.Control,
                  moveManual: ui.MoveEvent, 
                  runAuto: ui.AutorunEvent, 
                  sensors: flow.Sensing)
                 (move: ui.MoveStatus, 
                  autorun: ui.AutorunStatus, 
                  actuators: flow.Actuation)
    repeat
        if not sensors.machineEnabled then
            await sensors.machineEnabled
        end
        cobegin weak
            repeat
                var x_setpoint = sensors.x_actual
                when runAuto.present and runAuto.on abort
                    run Moving(tune.position, tune.manualLimit, moveManual, sensors)(move, x_setpoint, actuators)
                end
                when runAuto.present and not runAuto.on abort
                    run SwingingUp(tune.position, tune.standupLimit, tune.moves, sensors)(autorun, x_setpoint, actuators)
                    run Balancing(tune.balance, moveManual, sensors)(autorun, x_setpoint, actuators)
                end
            end
        with
            await not sensors.machineEnabled 
        end
    end
end
