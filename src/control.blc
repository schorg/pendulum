import params "params"
import flow "flow" exposes Sensing, Actuation
import position "position" exposes Positioning
import standup "standup" exposes Standup
import balance "balance" exposes LqrSim
import ui "ui"

// module exposes Control

activity RunManual(pp: params.Position, manualLimit: params.Limit,
                   moveCmd: ui.MoveEvent, sensors: Sensing)
                  (motion: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    cobegin
        repeat
            await moveCmd.present
            x_setpoint = moveCmd.x_setpoint
        end
    with
        run Positioning(pp, manualLimit, x_setpoint, sensors)(motion, actuators)
    end
end

activity RunStandup(pp: params.Position, standupLimit: params.Limit, sensors: Sensing)
                   (motion: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    var varyingLimit: params.Limit = {v_max = standupLimit.v_max, a_max = standupLimit.a_max}
    cobegin
       run Standup()(x_setpoint, varyingLimit)
    with weak
       run Positioning(pp, varyingLimit, x_setpoint, sensors)(motion, actuators)
    end
end

activity RunBalancing(moveCmd: ui.MoveEvent, sensors: Sensing)
                     (motionStatus: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    cobegin
        repeat
            await moveCmd.present
            x_setpoint = moveCmd.x_setpoint
        end
    with
        run LqrSim(x_setpoint, sensors)(actuators)
    end
end



struct UICommand
    var move: ui.MoveEvent
    var autorun: ui.AutorunEvent
end

// function mkUIEvent(autorun: ui.AutorunEvent, move: ui.MoveEvent) returns UICommand
// end


@[EntryPoint]
activity Control(move: ui.MoveEvent, autorun: ui.AutorunEvent, 
                 machineEnabled: bool, sensors: flow.Sensing)
                (motion: ui.MotionStatus, actuators: flow.Actuation)
    // This is preliminary should become a parameter
    let pc: params.Control = params.mkP1Control()
    repeat
        if not machineEnabled then
            await machineEnabled
        end
        cobegin weak
            repeat
                var x_setpoint = sensors.x_actual
                when autorun.present and autorun.on abort
                    run RunManual(pc.position, pc.manualLimit, move, sensors)(motion, x_setpoint, actuators)
                end
                when autorun.present and not autorun.on abort
                    run RunStandup(pc.position, pc.standupLimit, sensors)(motion, x_setpoint, actuators)
                    run RunBalancing(move, sensors)(motion, x_setpoint, actuators)
                end
            end
        with
            await not machineEnabled 
        end
    end
end
