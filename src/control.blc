import params "params" exposes Limits, manualLimits, standupLimits
import control_io "control_io" exposes Sensing, Actuation
import position "position" exposes Positioning
import standup "standup" exposes Standup
import balance "balance" exposes LqrSim
import ui "ui"


activity RunManual(pid: nat8, moveCmd: ui.MoveEvent, sensors: Sensing)
                  (motion: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    let limits: Limits = {v_max = manualLimits[pid].v_max, a_max = manualLimits[pid].a_max}
    cobegin
        repeat
            await moveCmd.present
            x_setpoint = moveCmd.x_setpoint
        end
    with
        run Positioning(pid, x_setpoint, limits, sensors)(motion, actuators)
    end
end

activity RunStandup(pid: nat8, sensors: Sensing)
                   (motion: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    var limits: Limits = {v_max = standupLimits[pid].v_max, a_max = standupLimits[pid].a_max}
    cobegin
        run Standup(pid)(x_setpoint, limits)
    with
        run Positioning(pid, x_setpoint, limits, sensors)(motion, actuators)
    end
end

activity RunBalancing(pid: nat8, moveCmd: ui.MoveEvent, sensors: Sensing)
                     (motionStatus: ui.MotionStatus, x_setpoint: float64, actuators: Actuation)
    cobegin
        repeat
            await moveCmd.present
            x_setpoint = moveCmd.x_setpoint
        end
    with
        run LqrSim(pid, x_setpoint, sensors)(actuators)
    end
end



struct UIEvent
    var move: ui.MoveEvent
    var autorun: ui.AutorunEvent
end

@[EntryPoint]
activity Control(pid: nat8, machineEnabled: bool, cmd: UIEvent, sensors: Sensing)
                (motion: ui.MotionStatus, actuators: Actuation)
    repeat
        if not machineEnabled then
            await machineEnabled
        end
        cobegin weak
            repeat
                var x_setpoint: float64 = sensors.x_actual
                when cmd.autorun.present and cmd.autorun.on abort
                    run RunManual(pid, cmd.move, sensors)(motion, x_setpoint, actuators)
                end
                when cmd.autorun.present and not cmd.autorun.on abort
                    run RunStandup(pid, sensors)(motion, x_setpoint, actuators)
                    run RunBalancing(pid, cmd.move, sensors)(motion, x_setpoint, actuators)
                end
            end
        with
            await not machineEnabled 
        end
    end
end
