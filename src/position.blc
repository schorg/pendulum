import time "time" exposes cycleTimeSec
import params "params"
import math "math" exposes minFloat64, maxFloat64, absFloat64
import flow "flow"
import ui "ui"

module exposes Positioning, x_setpointReached

function calculateVelocity(tune: params.Position, 
                           limit: params.Limit, 
                           x_setpoint: float64, 
                           sensors: flow.Sensing, 
                           actuators: flow.Actuation) returns float64
    var v_setpoint: float64 // this is just a test

    v_setpoint = x_setpoint - sensors.x_actual + tune.K_v * sensors.v_actual * tune.factor

    v_setpoint = math.minFloat64(limit.v_max, v_setpoint)
    v_setpoint = math.maxFloat64(-limit.v_max, v_setpoint)

    let v_limit = absFloat64(actuators.v_setpoint) + limit.a_max * cycleTimeSec
    if (v_setpoint >= 0) then
        return minFloat64(v_setpoint, v_limit)
    else 
        return maxFloat64(v_setpoint, -v_limit)
    end
end

function x_setpointReached(epsilon_x: float64, 
                           x_setpoint: float64, 
                           sensors: flow.Sensing) returns bool
    return absFloat64(x_setpoint - sensors.x_actual) < epsilon_x
end

activity Positioning(tune: params.Position, limit: params.Limit, 
                     x_setpoint: float64, sensors: flow.Sensing)
                    (inPosition: bool, actuators: flow.Actuation)
    repeat
        actuators.v_setpoint = 
            calculateVelocity(tune, limit, x_setpoint, sensors, actuators)
        inPosition =
            x_setpointReached(tune.epsilon_x, x_setpoint, sensors)
        await true
    end
end
