import params "params" exposes Limits, manualLimits, standupLimits, cycleTimeSec
import math "math" exposes minFloat64, maxFloat64, absFloat64
import control_io "control_io" exposes Sensing, Actuation
import ui "ui"

module exposes Positioning, x_setpointReached

struct Parameters
    let K_v: float64        // Weight of velocity soll
    let factor: float64     // Factor for velocity soll ??
    let epsilon_x: float64  // [m],  ABS(x_soll - x_ist) < epsilon_x
end

param pp: [2]Parameters = {
    [0] = {
        K_v = 0.03, 
        factor = 10.0, 
        epsilon_x = 0.005 
    },
    [1] = {
        K_v = 0.03, 
        factor = 10.0, 
        epsilon_x = 0.005 
    }
}

function calculateVelocity(pid: nat8, limits: Limits, x_setpoint: float64, 
                                    sensors: Sensing, actuators: Actuation) returns float64
    var v_setpoint: float64 // this is just a test

    v_setpoint = x_setpoint - sensors.x_actual + pp[pid].K_v * sensors.v_actual * pp[pid].factor

    v_setpoint = math.minFloat64(limits.v_max, v_setpoint)
    v_setpoint = math.maxFloat64(-limits.v_max, v_setpoint)

    let v_limit = absFloat64(actuators.v_setpoint) + limits.a_max * cycleTimeSec
    if (v_setpoint >= 0) then
        return minFloat64(v_setpoint, v_limit)
    else 
        return maxFloat64(v_setpoint, -v_limit)
    end
end

function x_setpointReached(pid: nat8, x_setpoint: float64, sensors: Sensing) returns bool
    return absFloat64(x_setpoint - sensors.x_actual) < pp[pid].epsilon_x
end

activity Positioning(pid: nat8, x_setpoint: float64, limits: Limits, sensors: Sensing)
                    (motion: ui.MotionStatus, actuators: Actuation)
    repeat
        actuators.v_setpoint = 
            calculateVelocity(pid, limits, x_setpoint, sensors, actuators)
        motion.positionReached =
            x_setpointReached(pid, x_setpoint, sensors)
        await true
    end
end

