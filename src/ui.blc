module exposes 
    MachineStatus,       
    EnableEvent,  
    AutorunEvent, 
    MoveEvent,
    PendulumStatus, initializePendulumStatus, 
    MoveStatus, initializeMoveStatus, ObserveMove,
    AutorunStatus, initializeAutorunStatus

// These use the same names as the pendulum UI
// The order is identical to the C definition, which allows for a cast

struct MachineStatus
    var emergencyStop: bool
    var doorOpen: bool
    var control: bool
end


struct EnableEvent
    var on: bool
    var present: bool
end

struct PendulumStatus
    var driveEnabled: bool
    var driveError: bool
end

function initializePendulumStatus()(ps: PendulumStatus)
    ps.driveEnabled = false
    ps.driveError = false
end


struct AutorunEvent
    var on: bool
    var present: bool
end

struct AutorunStatus
    var autoStarted: bool    // 
    var pendulumOk: bool     // x_setpoint reached, theta_180 true, theta_d_0 true
    var standupReady: bool     
    var standupFailed: bool 
    var balanceFailed: bool 
end


function initializeAutorunStatus()(ars: AutorunStatus)
    ars.autoStarted = false
    ars.pendulumOk = false
    ars.standupReady = false
    ars.standupFailed = false
    ars.balanceFailed = false
end

struct MoveEvent
    var x_setpoint: float64
    var present: bool
end 


/* Todo: Integrate this into UI and ports */
struct MoveStatus
    var started: bool
    var atPosition: bool
end

function initializeMoveStatus()(ms: MoveStatus)
    ms.started = false
    ms.atPosition = false
end

activity ObserveMove (atPosition: bool) (move: MoveStatus)        
    repeat
        move.atPosition = atPosition
        await true
    end
end
