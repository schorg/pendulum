import time "time" exposes MSEC

module exposes
    IO, io,
    Control, control,
    Limit, manualLimit, standupLimit,
    Position, position,
    Moves, moves,
    Balance, balance,
    V_MAX_ALL, A_MAX_ALL,
    DUR_0, DUR_1, DUR_2, DUR_3, DUR_4, DUR_5, DUR_6, DUR_7, DUR_8, DUR_9, DUR_10

struct IO
    let offsPend: int16             // offset pendulum
    let theta_gl: float64           // Glättung
    let theta_gl2: float64          // Glättung
    let calibrated_PI: float64      // used in rad calculation 
    let v_gl: float64               // Glättung
    let theta_180_delay: nat32      // on delay [msec]
    let theta_180_epsilon: float64
    let theta_d_0_delay: nat32      // on delay [msec]
    let theta_d_0_epsilon: float64 
end

param io: [2]IO = {
    [0] = {
        offsPend = 21757,  // calibrated
        theta_gl = 0.1,
        theta_gl2 = 0.01,
        calibrated_PI = 2.94836,
        v_gl = 0.08,       // calibrated
        theta_180_delay = 100 * MSEC,
        theta_180_epsilon = 0.235,
        theta_d_0_delay = 100 * MSEC,
        theta_d_0_epsilon = 0.03
    },
    [1] = {
        offsPend = 19845,  // calibrated different to p1
        theta_gl = 0.1,
        theta_gl2 = 0.01,
        calibrated_PI = 2.94836,
        v_gl = 0.1,   // calibrated different to p1
        theta_180_delay = 100 * MSEC,
        theta_180_epsilon = 0.235,
        theta_d_0_delay = 100 * MSEC,
        theta_d_0_epsilon = 0.03  
    }
}

/* Control parameters */

struct Limit
    var v_max: float64
    var a_max: float64
end

param manualLimit: [2]Limit = {
    [0] = {   
        // This should be zero, because it is set to 0.0 at auto mode start
        v_max = 0.2,  
        a_max = 0.5,  
    },
    [1] = {   
        // This should be zero, because it is set to 0.0 at auto mode start
        v_max = 0.2,  
        a_max = 0.5,  
    }
}

param standupLimit: [2]Limit = {
    [0] = {   
        // This should be zero, because it is set to 0.0 at auto mode start
        v_max = 0.2,  
        a_max = 0.5,  
    },
    [1] = {   
        // This should be zero, because it is set to 0.0 at auto mode start
        v_max = 0.2,  
        a_max = 0.5,  
    }
}

struct Balance 
    let m_axis :float64   // [kg]
    let F_max: float64    // [N]
    let v_max: float64    // [m/s]
    let K_x: float64      // Weight of pos
    let K_v: float64      // Weight of velocity
    let K_t: float64      // Weight of theta
    let K_td: float64     // Weight of delta theta
end

param balance: [2]Balance = {
    [0] = { 
        m_axis = 2.3,   // [kg]
        F_max = 800.0,  // [N]
        // .v_max = 2.0,  global 2.0 is overwritten by 1.0 in pos code
        v_max = 2.0,  // [m/s]
        K_x = 89.0,
        K_v = 97.0,
        K_t = 361.0,
        K_td = 40.0
    },
    [1] = { 
        m_axis = 2.3,   // [kg]
        F_max = 800.0,  // [N]
        // .v_max = 2.0,  global 2.0 is overwritten by 1.0 in pos code
        v_max = 2.0,  // [m/s]
        K_x = 89.0,
        K_v = 97.0,
        K_t = 361.0,
        K_td = 40.0
    }
}

struct Position
    let K_v: float64        // Weight of velocity soll
    let factor: float64     // Factor for velocity soll ??
    let epsilon_x: float64  // [m],  ABS(x_soll - x_ist) < epsilon_x
end

param position: [2]Position = {
    [0] = {
        K_v = 0.03, 
        factor = 10.0, 
        epsilon_x = 0.005 
    },
    [1] = {
        K_v = 0.03, 
        factor = 10.0, 
        epsilon_x = 0.005 
    }
}

struct Moves
    let pos: float64           // [m] position
    let vel: float64           // [m/s] velocity
    let acc: float64           // [m/s²] acceleration
    let time: nat32           // duration
end

const V_MAX_ALL: float64 = 0.4
const A_MAX_ALL: float64 = 2.0

const DUR_0: nat32 = 100 * MSEC
const DUR_1: nat32 = DUR_0 + 450 * MSEC
const DUR_2: nat32 = DUR_1 + 550 * MSEC
const DUR_3: nat32 = DUR_2 + 550 * MSEC
const DUR_4: nat32 = DUR_3 + 550 * MSEC
const DUR_5: nat32 = DUR_4 + 550 * MSEC
const DUR_6: nat32 = DUR_5 + 820 * MSEC
const DUR_7: nat32 = DUR_6 + 810 * MSEC
const DUR_8: nat32 = DUR_7 + 500 * MSEC
const DUR_9: nat32 = DUR_8 + 500 * MSEC
const DUR_10: nat32 = DUR_9 + 200 * MSEC

param moves: [2][11]Moves = {
    [0] = {
        [0] = {pos = 0.08, vel = 0.1, acc = A_MAX_ALL, time = DUR_0},
        [1] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_1},
        [2] = {pos = 0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_2},
        [3] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_3},
        [4] = {pos = 0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_4},
        [5] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_5},
        [6] = {pos = 0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_6},
        [7] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_7},
        [8] = {pos = -0.01, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_2},
        [9] = {pos = 0.0, vel = 0.0, acc = A_MAX_ALL, time = DUR_9},
        [10] = {pos = 0.0, vel = 0.0, acc = A_MAX_ALL, time = DUR_10},
    },
    [1] = {
        [0] = {pos = 0.08, vel = 0.1, acc = A_MAX_ALL, time = DUR_0},
        [1] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_1},
        [2] = {pos = 0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_2},
        [3] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_3},
        [4] = {pos = 0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_4},
        [5] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_5},
        [6] = {pos = 0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_6},
        [7] = {pos = -0.08, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_7},
        [8] = {pos = -0.01, vel = V_MAX_ALL, acc = A_MAX_ALL, time = DUR_2},
        [9] = {pos = 0.0, vel = 0.0, acc = A_MAX_ALL, time = DUR_9},
        [10] = {pos = 0.0, vel = 0.0, acc = A_MAX_ALL, time = DUR_10},
    }
}

struct Control
    let position: Position
    let manualLimit: Limit
    let standupLimit: Limit
    let moves: [11]Moves
    let balance: Balance
end

param control: [2]Control = {
    [0] = {
        position = position[0],
        manualLimit = manualLimit[0],
        standupLimit = standupLimit[0],
        moves = moves[0],
        balance = balance[0]
    },
    [1] = {
        position = position[1],
        manualLimit = manualLimit[1],
        standupLimit = standupLimit[1],
        moves = moves[1],
        balance = balance[1]
    }
}